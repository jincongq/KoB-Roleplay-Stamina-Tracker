import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;

public class PlayerDataFrame extends JFrame{
	
	

	private JPanel fullPanel;
	private PlayersPanel playersPanel;
	private DataPanel dataPanel;
	private int numOfPlayers;
	private ArrayList<Player> players;
	private Player currentPlayer;
	
	public PlayerDataFrame(){
		setSize(1300, 768);
		players=new ArrayList<Player>();
		currentPlayer=null;
		fullPanel=new JPanel();
		fullPanel.setLayout(new BorderLayout());
		playersPanel= new PlayersPanel(numOfPlayers, players);
		dataPanel= new DataPanel();
		add(fullPanel);
		fullPanel.add(playersPanel, BorderLayout.WEST);
		fullPanel.add(dataPanel,BorderLayout.CENTER);
		
	}

	public void addPlayer(String name, String characterName, String classBonus, String skill1, String skill2, String skill3, int fullStamina, int movement){
		players.add(new Player(name, characterName, classBonus, skill1, skill2, skill3, fullStamina, movement));
		numOfPlayers++;
		if (currentPlayer==null){
			currentPlayer=players.get(0);
		}
		fullPanel.remove(playersPanel);
		playersPanel = new PlayersPanel(numOfPlayers, players); 
		fullPanel.add(playersPanel, BorderLayout.WEST);
		fullPanel.validate();
		fullPanel.repaint();
	}
	
	
	
	/*
	 * Left side panel for selecting player to display. Constant.
	 */
	
	public void displayPlayer(String button){
		//Player temp=new Player(null,null,null,null, null,null, 0,0);
		for (Player player:players){
			if (player.name==button){
				//temp=player;
				
				currentPlayer=player;
				break;
			}
		}
		fullPanel.remove(dataPanel);
		dataPanel= new DataPanel(currentPlayer);
		fullPanel.add(dataPanel,BorderLayout.CENTER);
		fullPanel.validate();
		fullPanel.repaint();
	}
	
	public void displayPlayer(){
		fullPanel.remove(dataPanel);
		dataPanel= new DataPanel(currentPlayer);
		fullPanel.add(dataPanel,BorderLayout.CENTER);
		fullPanel.validate();
		fullPanel.repaint();
	}
	
	public void deplete(String button) {
		currentPlayer.depete(button);
		displayPlayer();
	}
	public void reset(){
		currentPlayer.reset();
		displayPlayer();
	}
	
	class ButtonListener implements ActionListener {
		String button;

		public ButtonListener(String string) {
			button = string;
		}

		public void actionPerformed(ActionEvent event) {
			if(button=="reset"){
				reset();
			}
			else if(button=="-1"||button=="-2"||button=="-3"||button=="+1"||button=="+2"||button=="+3"){
				deplete(button);
			}

			else{
				displayPlayer(button);
			}
		}
	}
	
	
	class PlayersPanel extends JPanel{
		
		JButton newButton;
		
		public PlayersPanel(int numOfPlayers, ArrayList<Player> players){
			setLayout (new GridLayout(numOfPlayers,1));
			if (numOfPlayers!=0){
				for (Player player:players){
					newButton= new JButton(player.name);
					newButton.addActionListener(new ButtonListener(player.name));
				/*if (player==currentPlayer){
					
				}*/
					add(newButton);
				}
			}
			
		}
		/*
		public PlayersPanel(){
			
		}*/
		
	}
	
	
	
	
	
	/*
	 * Center panel for displaying player data. Changes when players are selected.
	 */
	
	class DataPanel extends JPanel{
		JTextArea name, characterName, classBonus, skill1, skill2, skill3, stamina, movement;
		JPanel namePanel, depleteButtonPanel, buttonPanel, statPanel, nameStatPanel;
		JButton reset, deplete1, deplete2, deplete3, heal1, heal2, heal3;
		
		public DataPanel(){
			//do nothing
		}
		public DataPanel(Player player){
			
			setLayout(new GridLayout(5,1));
			//text
			name=new JTextArea("Player: "+player.name);
			characterName=new JTextArea("Character: "+player.characterName);
			classBonus=new JTextArea("Class Bonus: "+player.classBonus);
			skill1=new JTextArea(player.skill1);
			skill2=new JTextArea(player.skill2);
			skill3=new JTextArea(player.skill3);
			stamina=new JTextArea("Stamina: "+player.currentStamina+"/"+player.fullStamina);
			movement=new JTextArea("Movement: "+player.movement);
			//buttons
			reset = new JButton("Reset");
			reset.addActionListener(new ButtonListener("reset"));
			deplete1 = new JButton("-1");
			deplete1.addActionListener(new ButtonListener("-1"));
			deplete2 = new JButton("-2");
			deplete2.addActionListener(new ButtonListener("-2"));
			deplete3 = new JButton("-3");
			deplete3.addActionListener(new ButtonListener("-3"));
			heal1 = new JButton("+1");
			heal1.addActionListener(new ButtonListener("+1"));
			heal2 = new JButton("+2");
			heal2.addActionListener(new ButtonListener("+2"));
			heal3 = new JButton("+3");
			heal3.addActionListener(new ButtonListener("+3"));
			//font
			name.setFont(new Font("Arial", Font.BOLD, 45));
			characterName.setFont(new Font("Arial", Font.BOLD, 45));
			classBonus.setFont(new Font("Arial", Font.PLAIN, 30));
			skill1.setFont(new Font("Arial", Font.PLAIN, 30));
			skill2.setFont(new Font("Arial", Font.PLAIN, 30));
			skill3.setFont(new Font("Arial", Font.PLAIN, 30));
			stamina.setFont(new Font("Arial", Font.PLAIN, 35));
			movement.setFont(new Font("Arial", Font.PLAIN, 35));
			reset.setFont(new Font("Arial", Font.PLAIN, 30));
			deplete1.setFont(new Font("Arial", Font.PLAIN, 30));
			deplete2.setFont(new Font("Arial", Font.PLAIN, 30));
			deplete3.setFont(new Font("Arial", Font.PLAIN, 30));
			heal1.setFont(new Font("Arial", Font.PLAIN, 30));
			heal2.setFont(new Font("Arial", Font.PLAIN, 30));
			heal3.setFont(new Font("Arial", Font.PLAIN, 30));
			//word wrap
			name.setWrapStyleWord(true);
			characterName.setWrapStyleWord(true);
			classBonus.setWrapStyleWord(true);
			skill1.setWrapStyleWord(true);
			skill2.setWrapStyleWord(true);
			skill3.setWrapStyleWord(true);
			stamina.setWrapStyleWord(true);
			movement.setWrapStyleWord(true);
			//line wrap
			name.setLineWrap(true);
			characterName.setLineWrap(true);
			classBonus.setLineWrap(true);
			skill1.setLineWrap(true);
			skill2.setLineWrap(true);
			skill3.setLineWrap(true);
			stamina.setLineWrap(true);
			movement.setLineWrap(true);
			//edit false
			name.setEditable(false);
			characterName.setEditable(false);
			classBonus.setEditable(false);
			skill1.setEditable(false);
			skill2.setEditable(false);
			skill3.setEditable(false);
			stamina.setEditable(false);
			movement.setEditable(false);
			
			
			
			//namePanel
			namePanel=new JPanel();
			namePanel.setLayout(new GridLayout(1,3));
			namePanel.add(this.name);
			namePanel.add(this.characterName);
			
			//depleteButtonPanel
			depleteButtonPanel=new JPanel();
			depleteButtonPanel.setLayout(new GridLayout(2,3));
			depleteButtonPanel.add(deplete1);
			depleteButtonPanel.add(deplete2);
			depleteButtonPanel.add(deplete3);
			depleteButtonPanel.add(heal1);
			depleteButtonPanel.add(heal2);
			depleteButtonPanel.add(heal3);
			
			//buttonPanel
			buttonPanel=new JPanel();
			buttonPanel.setLayout(new GridLayout(2,1));
			buttonPanel.add(stamina);
			buttonPanel.add(reset);
			
			//statPanel
			statPanel=new JPanel();
			statPanel.setLayout(new GridLayout(1,3));
			statPanel.add(this.movement);
			statPanel.add(buttonPanel);
			statPanel.add(depleteButtonPanel);
			
			//nameStatPanel
			nameStatPanel=new JPanel();
			nameStatPanel.setLayout(new GridLayout(2,1));
					
			nameStatPanel.add(namePanel);
			nameStatPanel.add(statPanel);
			
			add(nameStatPanel);
			add(classBonus);
			add(skill1);
			add(skill2);
			add(skill3);
			
		}
		
	}
	
	/*
	 * Player data structure
	 */
	class Player{
		private String name, characterName, classBonus, skill1, skill2, skill3;
		private int fullStamina, movement, currentStamina;
		public Player(String name, String characterName, String classBonus, String skill1, String skill2, String skill3, int fullStamina, int movement){
			this.name=name;
			this.characterName=characterName;
			this.classBonus=classBonus;
			this.skill1=skill1;
			this.skill2=skill2;
			this.skill3=skill3;
			this.fullStamina=fullStamina;
			this.movement=movement;
			currentStamina=fullStamina;
		}
		public void reset() {
			currentStamina=fullStamina;
			
		}
		public void depete(String button) {
			currentStamina+=(Integer.parseInt(button));
			if (currentStamina<0){
				currentStamina=0;
			}
			if (currentStamina>fullStamina){
				currentStamina=fullStamina;
			}
			
		}
		
		
	}

	
}
